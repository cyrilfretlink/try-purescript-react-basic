const fs = require("fs");
const path = require("path");

const R = require("ramda");

const { version } = require("../package.json");
const banner = [
  `This file was generated by https://github.com/fretlink/purs-css-modules-webpack-plugin/tree/v${version}.`,
  "All modifications will be overwritten on compilation, do **not** edit it."
];

const dedent = R.compose(lines => {
  const start = lines
    .filter(line => line.length > 0)
    .map(line => {
      const [indent = ""] = line.match(/^\s*/) || [];
      return indent.length;
    }).reduce(R.min);
  return lines.map(line => line.slice(start)).join("\n");
}, R.split("\n"));

const mkForeignCSSModule = filename =>
  banner.map(R.concat("// ")).join("\n") + dedent(`

  "use strict";

  exports.importCSSModule = function () {
    return require(\"${filename}\");
  };
`);

const indent = (n, str) =>
  str.split("\n").map(line => " ".repeat(n) + line).join("\n");

const mkClassNamesRow = (depth, classes) => {
  if (!classes.length) return " ()";
  const row = `( ${classes.map(name => `"${name}" :: String`).join("\n, ")} )`;
  return "\n" + indent(depth + 2, row);
};

const mkCSSModule = (name, classes) =>
  banner.map(R.concat("-- | ")).join("\n") + dedent(`

  module ${name} where

  import Effect (Effect)

  type ClassNames =${mkClassNamesRow(2, classes)}

  foreign import importCSSModule :: Effect (Record ClassNames)
`);

const access = filename =>
  new Promise((resolve, reject) => {
    fs.access(filename, err => {
      if (err) reject(err);
      else resolve();
    })
  });
exports.access = access;

const exists = filename =>
  access(filename).then(() => true, () => false);
exports.exists = exists;

const unknownCSSModuleLocalsErr = filename => new Error(`
Couldnâ€™t extract local class names of ./${filename}
`.trimLeft());

exports.loadCSSModule = (loaderContext, filename) =>
  new Promise((resolve, reject) => {
    loaderContext.loadModule(filename, (err, source, map, module) => {
      if (err) return reject(err);

      const dep = module.dependencies.find(dep => dep.module &&
        dep.module.resource === module.resource);

      if (dep && dep.module.error) return reject(dep.module.error);

      const locals = loaderContext.pursCSSModulesLocals.get(filename);
      if (locals) return resolve(locals);

      reject(unknownCSSModuleLocalsErr(
        path.relative(loaderContext.rootContext, filename)));
    });
  });

const mkdir = dirname =>
  new Promise((resolve, reject) => {
    fs.mkdir(dirname, err => {
      if (err) reject(err);
      else resolve();
    });
  });
const writeFile = (filename, content) =>
  new Promise((resolve, reject) => {
    fs.writeFile(filename, content, err => {
      if (err) reject(err);
      else resolve();
    });
  });
exports.writeCSSModule = async ({ root, locals, styleSheetPath, namespace }) => {
  await access(root).catch(() => mkdir(root));

  await writeFile(path.join(root, ".purs-css-module"), "");
  await writeFile(path.join(root, "CSS.js"),
    mkForeignCSSModule(path.relative(root, styleSheetPath)));
  await writeFile(path.join(root, "CSS.purs"),
    mkCSSModule(`${namespace}.CSS`, Object.keys(locals)));
};

const rm = filename =>
  new Promise((resolve, reject) => {
    fs.unlink(filename, err => {
      if (err) reject(err);
      else resolve();
    });
  });
const rmdir = filename =>
  new Promise((resolve, reject) => {
    fs.rmdir(filename, err => {
      if (err) reject(err);
      else resolve();
    });
  });
exports.deleteCSSModule = async root => {
  if (await exists(path.join(root, ".purs-css-module"))) {
    for (const filename of [".purs-css-module", "CSS.js", "CSS.purs"]) {
      await rm(path.join(root, filename));
    }
    await rmdir(root).catch(notEmptyErr => {});
  }
};

exports.missingPluginErr = new Error(`
This loader must be used with its corresponding plugin
`.trimLeft());

exports.missingStyleSheetErr = info => new Error(`
Missing ./${info.styleSheetPath} imported by ${info.fromModuleName}
`.trimLeft());
