exports.matchErrLocation = /at (.+\.purs) line (\d+), column (\d+) - line (\d+), column (\d+)/;

exports.matchErrModuleName = /in module ((?:\w+\.)*\w+)/;

exports.matchMissingModuleName = /Module ((?:\w+\.)*\w+) was not found/;

exports.matchMissingImportFromModuleName = /Cannot import value \w+ from module ((?:\w+\.)*\w+)/;

exports.isPscMessage = message =>
  [matchErrModuleName, matchErrLocation].every(re => re.test(message));

const matchErrorsSeparator = /\n(?=Error)/;
exports.splitPscErrors = pscMessage =>
  pscMessage.split(matchErrorsSeparator);

const repeat = (value, times) =>
  times <= 0 ? [] : [value, ...repeat(value, times - 1)];
const diffPursModuleNames = (from, target, parts) => {
  if (!from.length) return parts.concat(target);
  if (!target.length) return parts.concat(repeat('..', from.length));
  const [head_from, ...tail_from] = from;
  const [head_target, ...tail_target] = target;
  return head_from === head_target
    ? diffPursModuleNames(tail_from, tail_target, parts)
    : parts.concat(repeat('..', from.length), target);
};
exports.resolvePursModule = ({ baseModulePath, baseModuleName, targetModuleName }) => {
  const parts = diffPursModuleNames(
    baseModuleName.split('.'),
    targetModuleName.split('.'),
    []);
  return parts.length
    ? path.resolve(baseModulePath,
      `${path.join(...parts)}.purs`)
    : baseModulePath;
};
